=====> flex-box
>-------------<

.flex-container {
	//--- СВОЙСТРО ДЛЯ РОДИТЕЛЯ
	//--- по горизонтальной оси
	display: flex; // все прижимается друг к другу, но занимает целый ряд и не перебрасывает элементы
	display: inline-flex; // занимает не цедый ряд, а только содержимое (подобно до inline-block, text-align: center; выравнивает по центру весь flex-блок)

	justify-content: flex-start; // по умолчанию (прижимает все к левому краю)
	justify-content: flex-end; // прижимает все к правому краю
	justify-content: center; // выровнять по центру
	justify-content: space-between; // равноменро раскидует, бока прижаты к краям (пространство появдяетмя только между элементами)
	justify-content: space-around; // равноменро раскидует, бока не прижаты к краям (пространство у элементов появляется по бокам)

	//--- по вертикальной оси
	align-items: stretch; // по умолчанию прижаты к верху, но все элементы подсторятся под высоту самого высокого элемента
	align-items: flex-start; // так же все элементы прижаты к верху, но отменяет их подстрой по высоте
	align-items: flex-end; // все елементы подсторятся подсамого высокого, но прижмутся к низу
	align-items: center; // выравнивает контэнт всех блоков по ценьру
	align-items: baseline; // выравнивает по баховой линии элемента, но никогда не используется (шрифт и всякая херня)

	flex-wrap: nowrap; // по умолчанию, не позволяет перекидывать элементы контейнера на другую строку
	flex-wrap: wrap; // при недостатке места перекидует элементы на другую строку
	flex-wrap: wrap-reverse; // при недостатке места мнняется порядок с первого на последний
	margin: 0 -10px; - чтобы элементы прижались к краям, родителю задаются отрицательные отступы такие, как и у его дочерних элементов отступы между собой 10px
	//--- новые свойства
	row-gap: 10px; // отступы между строками(отступ снизу)
	column-gap: 10px; // отступы между элементами (отступы по юокам)

	//--- flex-direction ( align-items, justify-content - все значения работают так же, только по вертикали)
	display: flex;
	flex-direction: row; // значение по умолчанию
	flex-direction: row-reverse; // прижимает элементы к правому краю и с права будет первый, второй... и так дальше
	flex-direction: column; // выстраивает элементы в котонку
	flex-direction: column-reverse; // выстраивает элементы в котонку, но реверсует - первый стает последним

	align-items: stretch; // по умолчанию, элементы занимают всю ширину строки
	align-items: start; // каждый элемент прижмется к леву и будет занимать только свое место
	align-items: flex-end; // все элементы прижмутся к правому краю

	justify-content: space-between; // растягует по вертикали элементы ( первый прижат к верху, последний к низу и все остальние распологаются по середине)

	order: 1; // меняет порядок элементов, но в таком случае порядок нужно указать всем

  flex: 1 1 auto;  // для content и тогда footer всегда прижат к низу
}

// .flex-column {
flex: 0 1 calc(50% - 95px); - ширина колонки будет 50% - минус указаное значение
// }

.flex-element {
	//--- СВОЙСТВО ДЛЯ ДОЧЕРНЕГО ЭЛЕМЕНТА

	//--- размеры
	flex-grow: 0; // позволяет увеличиваться, по умолчанию 0 (не позволяет увеличиваться), зависит от flex-basis: 30%; flex-basis: 500px;
	flex-shrink: 0; // позволяет уменьшаться, по умолчанию 0 (не позволяет уменьшаться), зависит от flex-basis: 30%; flex-basis: 500px;
	
	flex-basis: auto; // по умолчанию занимает размер блока
	flex-basis: 30%;
	flex-basis: 500px;

	flex: 0 0 500px; // flex-grow   flex-shrink   flex-basis (короткая запись)

	//--- изменяущее правило родителя 
	align-self: stretch; // прижмет элемент к верху, но подстраивается по высоте по самому высокому элементу
	align-self: flex-start; // прижмет элемент к верху? но отменит подстройку под самый высокий
	align-self: flex-end; // прижмет к нижнему краю и отменит подстройку под самый высокий
	order: 1; // меняет порядок элементов, но в таком случае порядок нужно указать всем
}

@supports not {row-gap} - браузер поддержует
@supports {row-gap} - браузер не поддержует
